// settings

var settingsCommands = {
	changeName: "üìù –ò–º—è",
	changePhone: "‚òéÔ∏è –¢–µ–ª ‚Ññ",	
	changeEmail: "‚úâÔ∏è E-mail",		
	changeAddress: "üè° –ê–¥—Ä–µ—Å",
	changeKidsInfo: "üë∂ –î–µ—Ç–∏",
	changeAboutInfo: "üìñ –û —Å–µ–±–µ"	
};

var streets = {
	deadendy: { button: "‚õÑ –°–µ–≤–µ—Ä–Ω—ã–π —Ç—É–ø.", name: "–°–µ–≤–µ—Ä–Ω—ã–π —Ç—É–ø–∏–∫", houses: [1,2,3,4,5,6,7,8,10] },
	starry: { button: "üî≠ –ó–≤–µ–∑–¥–Ω–∞—è —É–ª.", name: "–ó–≤–µ–∑–¥–Ω–∞—è", houses: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,29,31] },
	southy: { button: "‚òÄÔ∏è –Æ–∂–Ω–∞—è —É–ª.", name: "–Æ–∂–Ω–∞—è", houses: [2,3,4,5,6,7,8,10,11,12,13,14,15,16,18,20,22,24,26,28] },
	woody: { button: "üå≥ –õ–µ—Å–Ω–∞—è —É–ª.", name: "–õ–µ—Å–Ω–∞—è", houses: [1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,32,34,36,38,40,42] }
};			

var settingsUserState = {
	defaultState : 0,
	changeNameState : 1,	
	changePhoneState : 2,	
	changeEmailState : 3,	
	changeAddressState : 4,
	changeKidsInfoState : 5,
	changeAboutInfoState : 6
}

var currentState = {}; //settingsUserState.defaultState;

var settingsKeyboard = [ 
	[  settingsCommands.changeName, settingsCommands.changeEmail, settingsCommands.changePhone  ],
	[  settingsCommands.changeAddress, settingsCommands.changeKidsInfo, settingsCommands.changeAboutInfo  ],
	[ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" ]
];

// basic settings command
bot.onText(new RegExp('^('+commands.settings+'|\/settings)'), function (msg, match) {	
	if ( msg.chat.type != 'private' ) { 
		return; //allow to change settings only in private conversation
	}

	global.checkAuthentication(msg.from.id, function(result) {
		if ( result == false ) {
			return;
		}

		var message = "–ß—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å/—É–∫–∞–∑—ã–≤–∞—Ç—å?";
		
		var redisUserKey = "users:"+msg.from.id;
		
		redis.hgetall(redisUserKey, function (err, obj) {

			// set default name based on telegram info
			if ( obj == null || obj["name"] == null ) {
				var first = msg.from.first_name;
				var last = msg.from.last_name;
				
				var name = first != undefined ? first : "";
				name += last != undefined ? (" "+last) : "";
				
				if ( name.length <= 3 ) {
					name = msg.from.username;
				}
				
				obj = { "name": name }	
				redis.hset(redisUserKey, "name", name);
			}
			
			if ( obj["username"] == null && msg.from.username != null ) {
				obj["username"] = msg.from.username;
				
				redis.hset(redisUserKey, "username", msg.from.username);
			}
			
			message += "\n¬†¬†*–ò–º—è*: " + obj["name"];
			message += "\n¬†¬†*–¢–µ–ª–µ—Ñ–æ–Ω*: " + ((obj["tel"] == null) ? "_–Ω–µ —É–∫–∞–∑–∞–Ω_" : obj["tel"]);
			message += "\n¬†¬†*E-mail*: " + ((obj["email"] == null) ? "_–Ω–µ —É–∫–∞–∑–∞–Ω_" : obj["email"]);		
			message += "\n¬†¬†*–ê–¥—Ä–µ—Å*: "
									 + ((obj["street"] == null) ? 	"_–Ω–µ —É–∫–∞–∑–∞–Ω_"	 : obj["street"]) 
									 + ((obj["house"] == null)  ? 	""			 : (", "+obj["house"]));

			message += "\n¬†¬†*–î–µ—Ç–∏*: " + ((obj["kids"] == null) ? "_–Ω–µ—Ç —Å–≤–µ–¥–µ–Ω–∏–π_" : obj["kids"]);		
			message += "\n¬†¬†*–û —Å–µ–±–µ*: " + ((obj["bio"] == null) ? "_–ø—É—Å—Ç–æ_" : obj["bio"]);				

			var opts = {
				reply_markup: JSON.stringify({ keyboard: settingsKeyboard, resize_keyboard: true}),
				parse_mode: "markdown"
			};

			bot.sendMessage(msg.from.id, message, opts);
		});
	});
});


// change name/phone/email command 
bot.onText(new RegExp( '^('	+ settingsCommands.changeName
					  + '|' + settingsCommands.changePhone
					  + '|' + settingsCommands.changeEmail	
					  + '|' + settingsCommands.changeKidsInfo	
					  + '|' + settingsCommands.changeAboutInfo	+ ')$'), function (msg, match)  {	
								
	if ( msg.chat.type != 'private' ) { 
		return; //allow to change settings only in private conversation
	}
	
	global.checkAuthentication(msg.from.id, function(result) {
		if ( result == false ) {
			return;
		}
	
		var state = settingsUserState.defaultState;
		var prompt = null;
		
		switch (match[0]) {
			case settingsCommands.changeName:
				state = settingsUserState.changeNameState;
				prompt = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –≤–∞—à–∏ —Å–æ—Å–µ–¥–∏ —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:";
				break;
			case settingsCommands.changePhone:
				state = settingsUserState.changePhoneState;		
				prompt = "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–æ—Å–µ–¥–∏ —Å–º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ:";
				break;
			case settingsCommands.changeEmail:
				state = settingsUserState.changeEmailState;
				prompt = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å e-mail, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–æ–±–µ—â–∞–µ–º –Ω–µ¬†—Å–ø–∞–º–∏—Ç—å):"			
				break;
			case settingsCommands.changeKidsInfo:
				state = settingsUserState.changeKidsInfoState;
				prompt = "–£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ –∏¬†–≤–æ–∑—Ä–∞—Å—Ç —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–π, –≤–∫–ª—é—á–∞—è ‚Ññ‚Ññ¬†—à–∫–æ–ª/—Å–∞–¥–æ–≤, –∫—É–¥–∞¬†–æ–Ω–∏¬†—Ö–æ–¥—è—Ç:"
				break;
			case settingsCommands.changeAboutInfo:
				state = settingsUserState.changeAboutInfoState;
				prompt = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏¬†—Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π (–¥–ª—è¬†–ø–æ–∏—Å–∫–∞¬†–µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤):"
				break;
			default:
				break;
		}
		
		setTimeout(function () {
			setCurrentState(msg.from.id, state);
		}, 100);
		
		var opts = {
				reply_markup: {
					hide_keyboard: true,
					one_time_keyboard: true
				},
				parse_mode: "markdown"
			};

		if ( prompt != null ) {
			prompt += "\n_–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏¬†‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ¬†¬´–æ—Ç–º–µ–Ω–∞¬ª._";
			bot.sendMessage(msg.from.id, prompt, opts);
		}
	});
});

// capture all text input for generic fields
bot.onText(/[\s\S]{3,}/, function (msg, match) {
	if ( match[0].toLowerCase() == '–æ—Ç–º–µ–Ω–∞' || match[0].toLowerCase() == '–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é' ) { 
		return; //it's a special case for other handler
	}	
	
	if ( msg.chat.type != 'private' ) { 
		return; //allow to change settings only in private conversation
	}

	if ( getCurrentState(msg.from.id) == settingsUserState.changeKidsInfoState ) {	
		redis.hset("users:"+msg.from.id, "kids", match[0]);
	} else if ( getCurrentState(msg.from.id) == settingsUserState.changeAboutInfoState ) {
		redis.hset("users:"+msg.from.id, "bio", match[0]);
	} else {
		return;
	}
	
	var opts = {
		reply_markup: JSON.stringify({ keyboard: settingsKeyboard, resize_keyboard: true}),
		parse_mode: "markdown"
	};
	
	bot.sendMessage(msg.from.id, "–°—É–ø–µ—Ä! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", opts);
	setCurrentState(msg.from.id, settingsUserState.defaultState);
});

// capture normal text input when prompted for address
bot.onText(new RegExp("^[–∞-—èA-Z \\.\\-]{3,50}$", 'i'), function (msg, match) {
	if ( getCurrentState(msg.from.id) == settingsUserState.changeNameState ) {
		if ( match[0].toLowerCase() == '–æ—Ç–º–µ–Ω–∞' || match[0].toLowerCase() == '–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é' ) { 	
			return; //it's a special case for other handler
		}
		
		if ( msg.chat.type != 'private' ) { 
			return; //allow to change settings only in private conversation
		}
		
		if ( match[0] != null ) {
			var redisUserKey = "users:"+msg.from.id;
			var userName = match[0].replace(/\b\w/g, function(l){ return l.toUpperCase() })
			
			redis.hset(redisUserKey, "name", userName);
		}
		
		var opts = {
			reply_markup: JSON.stringify({ keyboard: settingsKeyboard, resize_keyboard: true}),
			parse_mode: "markdown"
		};

		bot.sendMessage(msg.from.id, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", opts);
		setCurrentState(msg.from.id, settingsUserState.defaultState);
	}
});

// capture email address when prompted for it
bot.onText(/^[^@\s]+@[^@\s]+\.[^@\s]+$/, function (msg, match) {
	if ( getCurrentState(msg.from.id) == settingsUserState.changeEmailState ) {		
		if ( msg.chat.type != 'private' ) { 
			return; //allow to change settings only in private conversation
		}
		
		if ( match[0] != null ) {
			var redisUserKey = "users:"+msg.from.id;
			redis.hset(redisUserKey, "email", match[0]);
		}
		
		var opts = {
			reply_markup: JSON.stringify({ keyboard: settingsKeyboard, resize_keyboard: true}),
			parse_mode: "markdown"
		};

		bot.sendMessage(msg.from.id, "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", opts);
		setCurrentState(msg.from.id, settingsUserState.defaultState);
	}
});


// capture telephone number when prompted for it
bot.onText(/^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/, function (msg, match) {
	if ( getCurrentState(msg.from.id) == settingsUserState.changePhoneState ) {		
		if ( msg.chat.type != 'private' ) { 
			return; //allow to change settings only in private conversation
		}
		
		if ( match[0] != null ) {
			var redisUserKey = "users:"+msg.from.id;
			redis.hset(redisUserKey, "tel", match[0]);
		}
		
		var opts = {
			reply_markup: JSON.stringify({ keyboard: settingsKeyboard, resize_keyboard: true}),
			parse_mode: "markdown"
		};

		bot.sendMessage(msg.from.id, "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", opts);
		setCurrentState(msg.from.id, settingsUserState.defaultState);
	}
});

// change address command
bot.onText(new RegExp('^'+settingsCommands.changeAddress), function (msg, match) {	
	if ( msg.chat.type != 'private' ) { 
		return; //allow to change settings only in private conversation
	}
	
	global.checkAuthentication(msg.from.id, function(result) {
		if ( result == false ) {
			return;
		}
	
		var keyboard = [ 
			[  streets.deadendy.button, 	streets.starry.button ],
			[  streets.southy.button, 		streets.woody.button ],
			[ "–û—Ç–º–µ–Ω–∞" ]
		];
		
		var opts = {
			reply_markup:  
				JSON.stringify({
					keyboard: keyboard, 
					one_time_keyboard: true,
					resize_keyboard: true
				}),
			parse_mode: "markdown"
		};

		bot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∂–∏–≤–µ—Ç–µ:", opts);
		
		setCurrentState(msg.from.id, settingsUserState.changeAddressState);
	});
});

// user chose street name
bot.onText(new RegExp( '^(' + streets.deadendy.button
					  + '|' + streets.starry.button
					  + '|' + streets.southy.button
					  + '|' + streets.woody.button	+ ')$'), function (msg, match)  {	

	if ( msg.chat.type != 'private' ) { 
		return; //allow to change settings only in private conversation
	}
	
	if ( getCurrentState(msg.from.id) != settingsUserState.changeAddressState ) {
		return; //don't allow to skip menu and directly send street names
	}
	
	var streetKey = null;
	
	//convert button text to plain street name
	for ( var key in streets ) {
		if ( match[1] == streets[key].button ) {
			streetKey = key;
			break;
		}
	}
		
	if ( streetKey != null ) {
		setCurrentState(msg.from.id, settingsUserState.changeAddressState);
		
		var streetName = streets[key].name;
		
		var redisUserKey = "users:"+msg.from.id;
		redis.hset(redisUserKey, "street", streetName);
		
		bot.sendPhoto(msg.from.id, "./images/map_"+streetKey+".png");
	}
			
	var opts = {
		reply_markup: {
			hide_keyboard: true
		},
		parse_mode: "markdown"
	};

	bot.sendMessage(msg.from.id, "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏¬†–∫–≤–∞—Ä—Ç–∏—Ä—ã –≤¬†–≤–∏–¥–µ ¬´–¥–æ–º/–∫–≤–∞—Ä—Ç–∏—Ä–∞¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä¬†*25/3*.\n\
–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å –ø–æ¬†–Ω–æ–≤–æ–º—É —Å—Ç–∏–ª—é, –Ω–µ –ø–æ¬†–∫–æ—Ä–ø—É—Å–∞–º.\n\
_–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî¬†–Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª._", opts);
});

// user prompted house number
bot.onText(/^(\d{1,2})\/(\d)$/, function (msg, match) {	
	if ( getCurrentState([msg.from.id]) == settingsUserState.changeAddressState ) {
		var redisUserKey = "users:"+msg.from.id;
		
		redis.hget(redisUserKey, "street", function (err, value) {
			var streetKey = null;
				
			//convert street name to symbolic street key 
			for ( var key in streets ) {
				if ( value == streets[key].name ) {
					streetKey = key;
					break;
				}
			}
			
			if ( streetKey != null ) {
				var houseIndex = streets[streetKey].houses.indexOf(parseInt(match[1]));
				
				if ( houseIndex == -1 || parseInt(match[2]) > 8 ) {
					var streetName = streets[streetKey].name;
					
					bot.sendMessage(msg.from.id, "–ù–∞ —É–ª–∏—Ü–µ " + streetName + " –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞. –°–≤–µ—Ä—å—Ç–µ—Å—å —Å¬†–∫–∞—Ä—Ç–æ–π –∏¬†–ø–æ–ø—Ä–æ–±—É–π—Ç–µ¬†—Å–Ω–æ–≤–∞.\n\
_–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî¬†–Ω–∞–ø–∏—à–∏—Ç–µ¬†¬´–æ—Ç–º–µ–Ω–∞¬ª._", {parse_mode: "markdown"});
						
					return;
				}
				
				if ( match[0] != null ) {
					redis.hset(redisUserKey, "house", match[0]);
				}
				
				var opts = {
					reply_markup: JSON.stringify({ keyboard: settingsKeyboard, resize_keyboard: true}),
					parse_mode: "markdown"
				};

				bot.sendMessage(msg.from.id, "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", opts);
				
				setCurrentState(msg.from.id, settingsUserState.defaultState);
			}
		});		
	}		
});


// reset state on cancel
bot.onText(new RegExp('^(–æ—Ç–º–µ–Ω–∞|\/cancel|–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é)', 'i'), function (msg, match) {
	setCurrentState(msg.from.id, settingsUserState.defaultState);
});

function setCurrentState(id, state) {
	if ( currentState[id] == undefined ) {
		currentState[id] = {};
	}
	
	currentState[id] = state;
}

function getCurrentState(id) {
	return currentState[id];
}

